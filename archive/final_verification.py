"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import pandas as pd
import sys
import io
import historical_analysis as ha
import forecast_analysis as fa

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

print("=" * 80)
print("–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
print("=" * 80)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
historical_df = pd.read_excel('datasets/inventory_dataset_monthly 2021-2023.xlsx')
forecast_df = pd.read_excel('datasets/forecast_data_2024_monthly.xlsx')

# –¢–µ—Å—Ç 1: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –° –∫–æ–ª–æ–Ω–∫–æ–π —Å–ø–∏—Å–∞–Ω–∏—è
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 1: –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –° –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ú –°–ü–ò–°–ê–ù–ò–ï–ú")
print("=" * 80)

date_col = historical_df.columns[0]
material_col = historical_df.columns[1]
branch_col = historical_df.columns[3]
start_col = historical_df.columns[4]
end_col = historical_df.columns[7]
cost_col = historical_df.columns[8]
consumption_col = historical_df.columns[6]  # –°–ø–∏—Å–∞–Ω–æ/–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ

print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫—É —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è: {consumption_col}")

results_df_with_consumption, _ = ha.analyze_historical_data(
    historical_df.head(100),  # –ü–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    date_col, branch_col, material_col,
    start_col, end_col, cost_col,
    5.0,
    consumption_column=consumption_col
)

print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
print(results_df_with_consumption[['–ú–∞—Ç–µ—Ä–∏–∞–ª', '–§–∏–ª–∏–∞–ª', '–°—Ä–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ',
                                   '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å', 'ABC-–∫–ª–∞—Å—Å', 'XYZ-–∫–ª–∞—Å—Å']].head())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
avg_usage_str = results_df_with_consumption['–°—Ä–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ'].iloc[0]
avg_usage_val = float(avg_usage_str.split()[0])
print(f"\n–ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è: {avg_usage_val}")
if avg_usage_val > 0:
    print("‚úÖ –°—Ä–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
else:
    print("‚ùå –°—Ä–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ (–æ—à–∏–±–∫–∞)")

# –¢–µ—Å—Ç 2: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ë–ï–ó –∫–æ–ª–æ–Ω–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è (fallback)
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 2: –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ë–ï–ó –ö–û–õ–û–ù–ö–ò –°–ü–ò–°–ê–ù–ò–Ø (FALLBACK)")
print("=" * 80)

results_df_without_consumption, _ = ha.analyze_historical_data(
    historical_df.head(100),
    date_col, branch_col, material_col,
    start_col, end_col, cost_col,
    5.0
    # –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º consumption_column
)

print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ (fallback):")
print(results_df_without_consumption[['–ú–∞—Ç–µ—Ä–∏–∞–ª', '–§–∏–ª–∏–∞–ª', '–°—Ä–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ']].head())
print("‚úÖ Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç")

# –¢–µ—Å—Ç 3: –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º rolling sum
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 3: –ü–†–û–ì–ù–û–ó–ù–´–ô –ê–ù–ê–õ–ò–ó –° FORWARD ROLLING SUM")
print("=" * 80)

forecast_date_col = forecast_df.columns[0]
forecast_material_col = forecast_df.columns[1]
forecast_branch_col = forecast_df.columns[3]
forecast_demand_col = forecast_df.columns[4]

# –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
forecast_df['–ü—Ä–æ–≥–Ω–æ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ'] = fa.forecast_start_balance(
    historical_df, forecast_df,
    date_col, material_col, branch_col, end_col,
    forecast_date_col, forecast_material_col, forecast_branch_col
)

# –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
forecast_df['–ü—Ä–æ–≥–Ω–æ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü'] = forecast_df['–ü—Ä–æ–≥–Ω–æ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ'] - forecast_df[forecast_demand_col]

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º forward rolling sum)
recommendations = fa.calculate_purchase_recommendations(
    forecast_df,
    '–ü—Ä–æ–≥–Ω–æ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü',
    forecast_demand_col,
    0.20
)

forecast_df = pd.concat([forecast_df, recommendations], axis=1)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞/—Ñ–∏–ª–∏–∞–ª–∞
sample = forecast_df[
    (forecast_df[forecast_material_col] == 'MAT-001') &
    (forecast_df[forecast_branch_col] == '–§–∏–ª–∏–∞–ª 1')
].head(5)

print(f"\n–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è MAT-001 –≤ –§–∏–ª–∏–∞–ª 1 (–ø–µ—Ä–≤—ã–µ 5 –ø–µ—Ä–∏–æ–¥–æ–≤):")
print(sample[[forecast_date_col, forecast_demand_col, '–ë—É–¥—É—â–∏–π —Å–ø—Ä–æ—Å',
              '–ü—Ä–æ–≥–Ω–æ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ']])

# –ü—Ä–æ–≤–µ—Ä–∫–∞ forward rolling sum
first_demand = sample[forecast_demand_col].iloc[0]
second_demand = sample[forecast_demand_col].iloc[1]
third_demand = sample[forecast_demand_col].iloc[2]
expected_future_demand = first_demand + second_demand + third_demand
actual_future_demand = sample['–ë—É–¥—É—â–∏–π —Å–ø—Ä–æ—Å'].iloc[0]

print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ forward rolling sum:")
print(f"  –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞ 0: {first_demand}")
print(f"  –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞ 1: {second_demand}")
print(f"  –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞ 2: {third_demand}")
print(f"  –û–∂–∏–¥–∞–µ–º—ã–π –±—É–¥—É—â–∏–π —Å–ø—Ä–æ—Å (0+1+2): {expected_future_demand}")
print(f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±—É–¥—É—â–∏–π —Å–ø—Ä–æ—Å: {actual_future_demand}")

if abs(expected_future_demand - actual_future_demand) < 0.01:
    print("‚úÖ Forward rolling sum —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
else:
    print("‚ùå Forward rolling sum –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 4: –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–ê–Ø –ü–û–¢–†–ï–ë–ù–û–°–¢–¨ –ù–ï –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–ï–¢–°–Ø")
print("=" * 80)

original_demand = forecast_df[forecast_demand_col].copy()

# –í—ã–∑—ã–≤–∞–µ–º analyze_forecast_data
analysis_df, _ = fa.analyze_forecast_data(
    forecast_df,
    forecast_date_col,
    forecast_material_col,
    forecast_branch_col,
    forecast_demand_col,
    '–ü—Ä–æ–≥–Ω–æ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ',
    '–ü—Ä–æ–≥–Ω–æ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü',
    '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ',
    '–ë—É–¥—É—â–∏–π —Å–ø—Ä–æ—Å',
    '–°—Ç—Ä–∞—Ö–æ–≤–æ–π –∑–∞–ø–∞—Å'
)

final_demand = analysis_df[forecast_demand_col]

# –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
if original_demand.equals(final_demand.round(0)):
    print("‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
    print(f"   –ò—Å—Ö–æ–¥–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å (–ø–µ—Ä–≤—ã–µ 3): {original_demand.head(3).tolist()}")
    print(f"   –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å (–ø–µ—Ä–≤—ã–µ 3): {final_demand.head(3).tolist()}")
else:
    print("‚ùå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –ü–ï–†–ï–ó–ê–ü–ò–°–ê–õ–ê–°–¨ (–æ—à–∏–±–∫–∞)")

# –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print("\n" + "=" * 80)
print("–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
print("=" * 80)
print("‚úÖ –û–®–ò–ë–ö–ê #1 (—Å—Ä–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ): –ò–°–ü–†–ê–í–õ–ï–ù–ê")
print("‚úÖ –û–®–ò–ë–ö–ê #2 (rolling sum): –ò–°–ü–†–ê–í–õ–ï–ù–ê")
print("‚úÖ –û–®–ò–ë–ö–ê #3 (Exponential Smoothing): –ò–°–ü–†–ê–í–õ–ï–ù–ê")
print("\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
