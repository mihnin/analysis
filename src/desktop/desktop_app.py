"""
–ì–ª–∞–≤–Ω–æ–µ desktop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤.

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ –ù–æ—Ä–Ω–∏–∫–µ–ª—å –°–ø—É—Ç–Ω–∏–∫ –¥–ª—è Windows.
"""

import sys
import os
import pandas as pd
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QScrollArea, QFileDialog, QMessageBox, QLabel, QSpinBox,
    QDoubleSpinBox, QComboBox, QRadioButton, QButtonGroup, QGroupBox
)
from PyQt6.QtCore import Qt, QThread, pyqtSignal
from PyQt6.QtGui import QIcon

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from desktop_ui_styles import *
from desktop_ui_components import *
from file_validation import *
from excel_export_desktop import export_full_report

# –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
from historical_analysis import analyze_historical_data, get_explanation as get_historical_explanation
from forecast_analysis import (
    analyze_forecast_data,
    auto_forecast_demand,
    get_explanation as get_forecast_explanation
)


class AnalysisWorker(QThread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ–Ω–µ"""

    progress = pyqtSignal(int, str)  # (–ø—Ä–æ—Ü–µ–Ω—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    finished = pyqtSignal(bool, object)  # (—É—Å–ø–µ—Ö, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞)

    def __init__(self, config):
        super().__init__()
        self.config = config

    def run(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"""
        try:
            results = {}

            # –®–∞–≥ 1: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            self.progress.emit(10, "–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            df_hist = pd.read_excel(self.config['historical_file'])

            self.progress.emit(30, "–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            hist_results = analyze_historical_data(
                df=df_hist,
                date_col=self.config.get('date_col', df_hist.columns[0]),
                branch_col=self.config.get('branch_col', None),
                material_col=self.config.get('material_col', df_hist.columns[1]),
                start_qty_col=self.config.get('start_qty_col', df_hist.columns[2]),
                end_qty_col=self.config.get('end_qty_col', df_hist.columns[3]),
                end_cost_col=self.config.get('end_cost_col', None),
                consumption_col=self.config.get('consumption_col', None),
                interest_rate=self.config.get('interest_rate', 0.05),
                lead_time_days=self.config.get('lead_time_days', 30)
            )
            results['historical'] = hist_results
            results['historical_explanation'] = get_historical_explanation(hist_results)

            # –®–∞–≥ 2: –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if self.config.get('forecast_mode') == 'auto':
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑
                self.progress.emit(50, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞...")

                forecast_df = auto_forecast_demand(
                    df_historical=df_hist,
                    date_col=self.config.get('date_col'),
                    material_col=self.config.get('material_col'),
                    branch_col=self.config.get('branch_col'),
                    consumption_col=self.config.get('consumption_col'),
                    periods=self.config.get('forecast_periods', 12),
                    model=self.config.get('forecast_model', 'auto')
                )

                self.progress.emit(70, "–†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∑–∞–∫—É–ø–∫–∞–º...")
                forecast_results = analyze_forecast_data(
                    df_forecast=forecast_df,
                    df_historical=df_hist,
                    date_col=self.config.get('date_col'),
                    branch_col=self.config.get('branch_col'),
                    material_col=self.config.get('material_col'),
                    planned_demand_col='planned_demand',
                    start_qty_col=self.config.get('start_qty_col'),
                    end_qty_col=self.config.get('end_qty_col'),
                    safety_stock_pct=self.config.get('safety_stock_pct', 0.20),
                    forecast_model=self.config.get('forecast_model', 'auto')
                )

            else:
                # –†—É—á–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ —Ñ–∞–π–ª–∞
                self.progress.emit(50, "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
                df_forecast = pd.read_excel(self.config['forecast_file'])

                self.progress.emit(70, "–†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∑–∞–∫—É–ø–∫–∞–º...")
                forecast_results = analyze_forecast_data(
                    df_forecast=df_forecast,
                    df_historical=df_hist,
                    date_col=self.config.get('date_col'),
                    branch_col=self.config.get('branch_col'),
                    material_col=self.config.get('material_col'),
                    planned_demand_col=self.config.get('planned_demand_col'),
                    start_qty_col=self.config.get('start_qty_col'),
                    end_qty_col=self.config.get('end_qty_col'),
                    safety_stock_pct=self.config.get('safety_stock_pct', 0.20)
                )

            results['forecast'] = forecast_results
            results['forecast_explanation'] = get_forecast_explanation(forecast_results)

            self.progress.emit(100, "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            self.finished.emit(True, results)

        except Exception as e:
            self.finished.emit(False, str(e))


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        super().__init__()

        # –î–∞–Ω–Ω—ã–µ
        self.historical_file = None
        self.forecast_file = None
        self.analysis_results = None

        # UI
        self.init_ui()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("–ù–æ—Ä–Ω–∏–∫–µ–ª—å –°–ø—É—Ç–Ω–∏–∫ - –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤")
        self.setGeometry(100, 100, 1200, 800)

        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª–∏
        self.setStyleSheet(get_main_window_style())

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        main_layout = QVBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # –®–∞–ø–∫–∞
        header = NornikHeader()
        main_layout.addWidget(header)

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setStyleSheet(f"""
            QScrollArea {{
                border: none;
                background-color: {NornikColors.BACKGROUND};
            }}
        """)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_widget = QWidget()
        content_layout = QVBoxLayout()
        content_layout.setContentsMargins(
            NornikMetrics.PADDING_LARGE,
            NornikMetrics.PADDING_LARGE,
            NornikMetrics.PADDING_LARGE,
            NornikMetrics.PADDING_LARGE
        )
        content_layout.setSpacing(NornikMetrics.PADDING_LARGE)

        # –°–µ–∫—Ü–∏—è 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        hist_card = self.create_historical_section()
        content_layout.addWidget(hist_card)

        # –°–µ–∫—Ü–∏—è 2: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        forecast_card = self.create_forecast_section()
        content_layout.addWidget(forecast_card)

        # –°–µ–∫—Ü–∏—è 3: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        params_card = self.create_parameters_section()
        content_layout.addWidget(params_card)

        # –°–µ–∫—Ü–∏—è 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        control_card = self.create_control_section()
        content_layout.addWidget(control_card)

        # –°–µ–∫—Ü–∏—è 5: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.results_card = self.create_results_section()
        self.results_card.setVisible(False)
        content_layout.addWidget(self.results_card)

        content_layout.addStretch()

        content_widget.setLayout(content_layout)
        scroll.setWidget(content_widget)

        main_layout.addWidget(scroll)

        central_widget.setLayout(main_layout)

    def create_historical_section(self):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        card = NornikCard()
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = NornikHeadingLabel("1Ô∏è‚É£ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
        layout.addWidget(title)

        info = InfoCard(
            "–ß—Ç–æ –Ω—É–∂–Ω–æ?",
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. "
            "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: –î–∞—Ç–∞, –ú–∞—Ç–µ—Ä–∏–∞–ª, –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫, –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫.",
            icon="üìä",
            color=NornikColors.PRIMARY_BLUE
        )
        layout.addWidget(info)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        self.historical_upload = FileUploadCard(
            "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
            file_type="–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"
        )
        self.historical_upload.file_selected.connect(self.on_historical_file_selected)
        layout.addWidget(self.historical_upload)

        card.setLayout(layout)
        return card

    def create_forecast_section(self):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
        card = NornikCard()
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = NornikHeadingLabel("2Ô∏è‚É£ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞")
        layout.addWidget(title)

        info = InfoCard(
            "–î–≤–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:",
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞ –ò–õ–ò –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
            icon="üîÆ",
            color=NornikColors.TURQUOISE
        )
        layout.addWidget(info)

        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        mode_group = QGroupBox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        mode_group.setStyleSheet(f"""
            QGroupBox {{
                font-size: {NornikFonts.SIZE_BODY}px;
                font-weight: {NornikFonts.WEIGHT_SEMIBOLD};
                border: 2px solid {NornikColors.BORDER};
                border-radius: {NornikMetrics.BORDER_RADIUS_MEDIUM}px;
                margin-top: {NornikMetrics.PADDING_MEDIUM}px;
                padding-top: {NornikMetrics.PADDING_MEDIUM}px;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: {NornikMetrics.PADDING_MEDIUM}px;
                padding: 0 {NornikMetrics.PADDING_SMALL}px;
            }}
        """)

        mode_layout = QVBoxLayout()

        self.radio_manual = QRadioButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ Excel —Ñ–∞–π–ª–∞")
        self.radio_auto = QRadioButton("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        self.radio_auto.setChecked(True)

        mode_layout.addWidget(self.radio_manual)
        mode_layout.addWidget(self.radio_auto)

        mode_group.setLayout(mode_layout)
        layout.addWidget(mode_group)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        self.forecast_upload = FileUploadCard(
            "–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –ø–ª–∞–Ω–æ–≤—ã–º —Å–ø—Ä–æ—Å–æ–º –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            file_type="–ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        )
        self.forecast_upload.file_selected.connect(self.on_forecast_file_selected)
        self.forecast_upload.setVisible(False)
        layout.addWidget(self.forecast_upload)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–≥–Ω–æ–∑–∞
        auto_settings = QWidget()
        auto_layout = QVBoxLayout()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤
        periods_layout = QHBoxLayout()
        periods_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:"))
        self.forecast_periods_spin = QSpinBox()
        self.forecast_periods_spin.setRange(1, 24)
        self.forecast_periods_spin.setValue(12)
        self.forecast_periods_spin.setSuffix(" –º–µ—Å.")
        self.forecast_periods_spin.setStyleSheet(get_input_style())
        periods_layout.addWidget(self.forecast_periods_spin)
        periods_layout.addStretch()
        auto_layout.addLayout(periods_layout)

        # –ú–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        model_layout = QHBoxLayout()
        model_layout.addWidget(QLabel("–ú–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:"))
        self.forecast_model_combo = QComboBox()
        self.forecast_model_combo.addItems([
            "AUTO (–∞–≤—Ç–æ–≤—ã–±–æ—Ä –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏)",
            "naive",
            "moving_average",
            "exponential_smoothing",
            "holt_winters",
            "sarima"
        ])
        self.forecast_model_combo.setStyleSheet(get_input_style())
        model_layout.addWidget(self.forecast_model_combo)
        model_layout.addStretch()
        auto_layout.addLayout(model_layout)

        auto_settings.setLayout(auto_layout)
        layout.addWidget(auto_settings)
        self.auto_forecast_settings = auto_settings

        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
        self.radio_manual.toggled.connect(lambda checked: self.forecast_upload.setVisible(checked))
        self.radio_manual.toggled.connect(lambda checked: self.auto_forecast_settings.setVisible(not checked))

        card.setLayout(layout)
        return card

    def create_parameters_section(self):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        card = NornikCard()
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = NornikHeadingLabel("3Ô∏è‚É£ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
        layout.addWidget(title)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        params_layout = QHBoxLayout()

        # –ö–æ–ª–æ–Ω–∫–∞ 1
        col1_layout = QVBoxLayout()

        # –ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –∑–∞–ø–∞—Å–∞
        safety_layout = QVBoxLayout()
        safety_layout.addWidget(QLabel("–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –∑–∞–ø–∞—Å–∞:"))
        self.safety_stock_spin = QDoubleSpinBox()
        self.safety_stock_spin.setRange(0, 100)
        self.safety_stock_spin.setValue(20)
        self.safety_stock_spin.setSuffix(" %")
        self.safety_stock_spin.setSingleStep(5)
        self.safety_stock_spin.setStyleSheet(get_input_style())
        safety_layout.addWidget(self.safety_stock_spin)
        safety_caption = NornikCaptionLabel("–†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥–µ—Ñ–∏—Ü–∏—Ç–∞")
        safety_layout.addWidget(safety_caption)
        col1_layout.addLayout(safety_layout)

        col1_layout.addSpacing(NornikMetrics.PADDING_MEDIUM)

        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
        rate_layout = QVBoxLayout()
        rate_layout.addWidget(QLabel("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (opportunity cost):"))
        self.interest_rate_spin = QDoubleSpinBox()
        self.interest_rate_spin.setRange(0, 100)
        self.interest_rate_spin.setValue(5)
        self.interest_rate_spin.setSuffix(" %")
        self.interest_rate_spin.setSingleStep(0.5)
        self.interest_rate_spin.setStyleSheet(get_input_style())
        rate_layout.addWidget(self.interest_rate_spin)
        rate_caption = NornikCaptionLabel("–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∑–∞–ø–∞—Å–∞—Ö")
        rate_layout.addWidget(rate_caption)
        col1_layout.addLayout(rate_layout)

        params_layout.addLayout(col1_layout, 1)

        # –ö–æ–ª–æ–Ω–∫–∞ 2
        col2_layout = QVBoxLayout()

        # –í—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∫–∏
        lead_time_layout = QVBoxLayout()
        lead_time_layout.addWidget(QLabel("–í—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∫–∏ (lead time):"))
        self.lead_time_spin = QSpinBox()
        self.lead_time_spin.setRange(1, 365)
        self.lead_time_spin.setValue(30)
        self.lead_time_spin.setSuffix(" –¥–Ω–µ–π")
        self.lead_time_spin.setStyleSheet(get_input_style())
        lead_time_layout.addWidget(self.lead_time_spin)
        lead_time_caption = NornikCaptionLabel("–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ–∑–∞–∫–∞–∑–∞ (ROP)")
        lead_time_layout.addWidget(lead_time_caption)
        col2_layout.addLayout(lead_time_layout)

        params_layout.addLayout(col2_layout, 1)

        layout.addLayout(params_layout)

        card.setLayout(layout)
        return card

    def create_control_section(self):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        card = NornikCard()
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = NornikHeadingLabel("4Ô∏è‚É£ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        layout.addWidget(title)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()

        self.run_button = NornikPrimaryButton("‚ñ∂ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
        self.run_button.clicked.connect(self.run_analysis)
        buttons_layout.addWidget(self.run_button)

        self.export_button = NornikSecondaryButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel")
        self.export_button.clicked.connect(self.export_results)
        self.export_button.setEnabled(False)
        buttons_layout.addWidget(self.export_button)

        self.help_button = NornikSecondaryButton("‚ùì –°–ø—Ä–∞–≤–∫–∞")
        self.help_button.clicked.connect(self.show_help)
        buttons_layout.addWidget(self.help_button)

        layout.addLayout(buttons_layout)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = NornikProgressBar()
        self.progress_bar.setValue(0)
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)

        self.progress_label = QLabel("")
        self.progress_label.setStyleSheet(f"""
            QLabel {{
                color: {NornikColors.TEXT_SECONDARY};
                font-size: {NornikFonts.SIZE_CAPTION}px;
            }}
        """)
        self.progress_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.progress_label.setVisible(False)
        layout.addWidget(self.progress_label)

        card.setLayout(layout)
        return card

    def create_results_section(self):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        card = NornikCard()
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = NornikHeadingLabel("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        layout.addWidget(title)

        self.results_label = QLabel("")
        self.results_label.setWordWrap(True)
        self.results_label.setStyleSheet(f"""
            QLabel {{
                font-size: {NornikFonts.SIZE_BODY}px;
                padding: {NornikMetrics.PADDING_MEDIUM}px;
                background-color: #E8F5E9;
                border-radius: {NornikMetrics.BORDER_RADIUS_SMALL}px;
            }}
        """)
        layout.addWidget(self.results_label)

        card.setLayout(layout)
        return card

    def on_historical_file_selected(self, file_path):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        result = validate_historical_data(file_path)
        if result.is_valid:
            self.historical_file = file_path
            self.historical_upload.set_status(result.message, "success")
            if result.warnings:
                for warning in result.warnings:
                    self.historical_upload.set_status(warning, "warning")
        else:
            self.historical_upload.set_status(result.get_full_message(), "error")

    def on_forecast_file_selected(self, file_path):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        result = validate_forecast_data(file_path)
        if result.is_valid:
            self.forecast_file = file_path
            self.forecast_upload.set_status(result.message, "success")
            if result.warnings:
                for warning in result.warnings:
                    self.forecast_upload.set_status(warning, "warning")
        else:
            self.forecast_upload.set_status(result.get_full_message(), "error")

    def run_analysis(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if not self.historical_file:
            show_message_box(
                self,
                "–û—à–∏–±–∫–∞",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
                "error"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if self.radio_manual.isChecked() and not self.forecast_file:
            show_message_box(
                self,
                "–û—à–∏–±–∫–∞",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º",
                "error"
            )
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = {
            'historical_file': self.historical_file,
            'forecast_mode': 'auto' if self.radio_auto.isChecked() else 'manual',
            'safety_stock_pct': self.safety_stock_spin.value() / 100,
            'interest_rate': self.interest_rate_spin.value() / 100,
            'lead_time_days': self.lead_time_spin.value(),
        }

        if self.radio_auto.isChecked():
            config['forecast_periods'] = self.forecast_periods_spin.value()
            model_text = self.forecast_model_combo.currentText()
            config['forecast_model'] = model_text.split(' ')[0].lower()
        else:
            config['forecast_file'] = self.forecast_file

        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        self.run_button.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.progress_label.setVisible(True)
        self.progress_bar.setValue(0)

        self.worker = AnalysisWorker(config)
        self.worker.progress.connect(self.on_analysis_progress)
        self.worker.finished.connect(self.on_analysis_finished)
        self.worker.start()

    def on_analysis_progress(self, percent, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        self.progress_bar.setValue(percent)
        self.progress_label.setText(message)

    def on_analysis_finished(self, success, result):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
        self.run_button.setEnabled(True)
        self.progress_bar.setVisible(False)
        self.progress_label.setVisible(False)

        if success:
            self.analysis_results = result
            self.show_results(result)
            self.export_button.setEnabled(True)
            show_message_box(
                self,
                "–£—Å–ø–µ—Ö",
                "–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –Ω–∏–∂–µ.",
                "success"
            )
        else:
            show_message_box(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:\n\n{result}",
                "error"
            )

    def show_results(self, results):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        self.results_card.setVisible(True)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏
        hist_df = results['historical']
        forecast_df = results['forecast']

        summary = f"""
        <h3 style='color: {NornikColors.PRIMARY_BLUE};'>–°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</h3>

        <b>–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</b><br>
        ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {hist_df['–ú–∞—Ç–µ—Ä–∏–∞–ª'].nunique() if '–ú–∞—Ç–µ—Ä–∏–∞–ª' in hist_df else len(hist_df)}<br>
        ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {hist_df['–î–∞—Ç–∞'].min()} - {hist_df['–î–∞—Ç–∞'].max() if '–î–∞—Ç–∞' in hist_df else 'N/A'}<br>
        ‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –º–µ—Ç—Ä–∏–∫: {len(hist_df.columns)}<br>
        <br>

        <b>–ü—Ä–æ–≥–Ω–æ–∑ –∏ –∑–∞–∫—É–ø–∫–∏:</b><br>
        ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {len(forecast_df)}<br>
        ‚Ä¢ –í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∑–∞–∫—É–ø–∫–∞–º: {(forecast_df.iloc[:, -1] > 0).sum() if len(forecast_df) > 0 else 0}<br>
        ‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∑–∞–∫—É–ø–æ–∫: {forecast_df.iloc[:, -1].sum():.2f} –µ–¥.<br>
        <br>

        <p style='color: {NornikColors.SUCCESS}; font-weight: bold;'>
        –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel"
        </p>
        """

        self.results_label.setText(summary)

    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel"""
        if not self.analysis_results:
            show_message_box(
                self,
                "–û—à–∏–±–∫–∞",
                "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.",
                "error"
            )
            return

        # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            f"–ê–Ω–∞–ª–∏–∑_–∑–∞–ø–∞—Å–æ–≤_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            "Excel Files (*.xlsx)"
        )

        if file_path:
            # –≠–∫—Å–ø–æ—Ä—Ç
            success = export_full_report(
                file_path,
                df_historical=self.analysis_results['historical'],
                explanation_historical=self.analysis_results['historical_explanation'],
                df_forecast=self.analysis_results['forecast'],
                explanation_forecast=self.analysis_results['forecast_explanation']
            )

            if success:
                show_message_box(
                    self,
                    "–£—Å–ø–µ—Ö",
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:\n{file_path}",
                    "success"
                )
            else:
                show_message_box(
                    self,
                    "–û—à–∏–±–∫–∞",
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª",
                    "error"
                )

    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
        <h2 style='color: #0077C8;'>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</h2>

        <h3>–ü–æ—Ä—è–¥–æ–∫ —Ä–∞–±–æ—Ç—ã:</h3>
        <ol>
            <li><b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</b> - Excel —Ñ–∞–π–ª —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</li>
            <li><b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
                <ul>
                    <li>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ò–õ–ò</li>
                    <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</li>
                </ul>
            </li>
            <li><b>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b> (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</li>
            <li><b>–ù–∞–∂–º–∏—Ç–µ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"</b></li>
            <li><b>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel</b></li>
        </ol>

        <h3>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:</h3>
        <ul>
            <li>–§–æ—Ä–º–∞—Ç: .xlsx –∏–ª–∏ .xls</li>
            <li>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: –î–∞—Ç–∞, –ú–∞—Ç–µ—Ä–∏–∞–ª, –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫, –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫</li>
            <li>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: –§–∏–ª–∏–∞–ª, –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –°—Ç–æ–∏–º–æ—Å—Ç—å</li>
        </ul>

        <h3>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</h3>
        <p>–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ù–æ—Ä–Ω–∏–∫–µ–ª—å –°–ø—É—Ç–Ω–∏–∫.</p>
        """

        msg = QMessageBox(self)
        msg.setWindowTitle("–°–ø—Ä–∞–≤–∫–∞")
        msg.setTextFormat(Qt.TextFormat.RichText)
        msg.setText(help_text)
        msg.setStyleSheet(get_message_box_style("info"))
        msg.exec()


def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = QApplication(sys.argv)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setApplicationName("–ù–æ—Ä–Ω–∏–∫–µ–ª—å –°–ø—É—Ç–Ω–∏–∫ - –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∞—Å–æ–≤")
    app.setOrganizationName("–ù–æ—Ä–Ω–∏–∫–µ–ª—å –°–ø—É—Ç–Ω–∏–∫")

    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
    app.setStyleSheet(get_scrollbar_style())

    # –°–æ–∑–¥–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = MainWindow()
    window.show()

    sys.exit(app.exec())


if __name__ == "__main__":
    main()
