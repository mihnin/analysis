"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import pandas as pd
import sys
import io
import historical_analysis as ha

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

print("=" * 80)
print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô")
print("=" * 80)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
historical_df = pd.read_excel('datasets/inventory_dataset_monthly 2021-2023.xlsx')

date_col = historical_df.columns[0]
material_col = historical_df.columns[1]
branch_col = historical_df.columns[3]
start_col = historical_df.columns[4]
end_col = historical_df.columns[7]
cost_col = historical_df.columns[8]
consumption_col = historical_df.columns[6]

print("\n–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –ù–û–í–´–ú–ò –º–µ—Ç—Ä–∏–∫–∞–º–∏...")
print("-" * 80)

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ Lead Time
lead_times = [7, 14, 30, 60]

for lead_time in lead_times:
    print(f"\nüì¶ Lead Time = {lead_time} –¥–Ω–µ–π")
    print("-" * 40)

    results_df, _ = ha.analyze_historical_data(
        historical_df.head(45),  # –ü–µ—Ä–≤—ã–µ 45 —Å—Ç—Ä–æ–∫ (3 –º–∞—Ç–µ—Ä–∏–∞–ª–∞ √ó 3 —Ñ–∏–ª–∏–∞–ª–∞ √ó 5 –º–µ—Å—è—Ü–µ–≤)
        date_col, branch_col, material_col,
        start_col, end_col, cost_col,
        5.0,
        consumption_column=consumption_col,
        lead_time_days=lead_time
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    sample = results_df.iloc[0]

    print(f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {sample['–ú–∞—Ç–µ—Ä–∏–∞–ª']} –≤ {sample['–§–∏–ª–∏–∞–ª']}")
    print(f"\n–ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò:")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {sample['–°—Ä–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ']}")
    print(f"  ‚Ä¢ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å: {sample['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å']}")
    print(f"  ‚Ä¢ ABC-–∫–ª–∞—Å—Å: {sample['ABC-–∫–ª–∞—Å—Å']}")
    print(f"  ‚Ä¢ XYZ-–∫–ª–∞—Å—Å: {sample['XYZ-–∫–ª–∞—Å—Å']}")

    print(f"\n‚ú® –ù–û–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print(f"  ‚Ä¢ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å (–¥–Ω–∏): {sample['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å (–¥–Ω–∏)']}")
    print(f"  ‚Ä¢ –¢–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞ (ROP): {sample['–¢–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞ (ROP)']} –ø—Ä–∏ Lead Time {lead_time} –¥–Ω–µ–π")
    print(f"  ‚Ä¢ –ü–µ—Ä–∏–æ–¥—ã —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º: {sample['–ü–µ—Ä–∏–æ–¥—ã —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º']}")
    print(f"  ‚Ä¢ Fill Rate: {sample['Fill Rate']}")
    print(f"  ‚Ä¢ –ú–µ—Ä—Ç–≤—ã–π –∑–∞–ø–∞—Å: {sample['–ú–µ—Ä—Ç–≤—ã–π –∑–∞–ø–∞—Å']}")

print("\n" + "=" * 80)
print("–ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ù–û–í–´–• –ú–ï–¢–†–ò–ö")
print("=" * 80)

# –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
full_results, _ = ha.analyze_historical_data(
    historical_df,
    date_col, branch_col, material_col,
    start_col, end_col, cost_col,
    5.0,
    consumption_column=consumption_col,
    lead_time_days=30
)

print(f"\n–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(full_results)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª√ó—Ñ–∏–ª–∏–∞–ª")

print("\n1. –ê–ù–ê–õ–ò–ó –û–ë–û–†–ê–ß–ò–í–ê–ï–ú–û–°–¢–ò –í –î–ù–Ø–•")
print("-" * 80)
days_values = full_results['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å (–¥–Ω–∏)'].value_counts().head(5)
print(days_values)

print("\n2. –ê–ù–ê–õ–ò–ó –¢–û–ß–ö–ò –ó–ê–ö–ê–ó–ê (ROP)")
print("-" * 80)
print("–ü—Ä–∏–º–µ—Ä—ã ROP –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
print(full_results[['–ú–∞—Ç–µ—Ä–∏–∞–ª', '–§–∏–ª–∏–∞–ª', '–¢–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞ (ROP)', '–°—Ä–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ']].head(5))

print("\n3. –ê–ù–ê–õ–ò–ó –î–ï–§–ò–¶–ò–¢–û–í")
print("-" * 80)
print("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –¥–µ—Ñ–∏—Ü–∏—Ç–∞–º–∏:")
deficit_materials = full_results[full_results['–ü–µ—Ä–∏–æ–¥—ã —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º'].str.contains('–∏–∑')]
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(deficit_materials)}")
print(deficit_materials[['–ú–∞—Ç–µ—Ä–∏–∞–ª', '–§–∏–ª–∏–∞–ª', '–ü–µ—Ä–∏–æ–¥—ã —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º', 'Fill Rate']].head())

print("\n4. –ê–ù–ê–õ–ò–ó FILL RATE")
print("-" * 80)
print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Fill Rate:")
# –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
fill_rates = full_results['Fill Rate'].str.replace('%', '').astype(float)
print(f"  –°—Ä–µ–¥–Ω–∏–π Fill Rate: {fill_rates.mean():.1f}%")
print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {fill_rates.min():.1f}%")
print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {fill_rates.max():.1f}%")

low_fill_rate = full_results[fill_rates < 95]
if len(low_fill_rate) > 0:
    print(f"\n‚ö†Ô∏è  –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å Fill Rate < 95% (—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è):")
    print(low_fill_rate[['–ú–∞—Ç–µ—Ä–∏–∞–ª', '–§–∏–ª–∏–∞–ª', 'Fill Rate', '–ü–µ—Ä–∏–æ–¥—ã —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º']])
else:
    print("\n‚úÖ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–º–µ—é—Ç Fill Rate >= 95%")

print("\n5. –ê–ù–ê–õ–ò–ó –ú–ï–†–¢–í–û–ì–û –ó–ê–ü–ê–°–ê")
print("-" * 80)
dead_stock = full_results[full_results['–ú–µ—Ä—Ç–≤—ã–π –∑–∞–ø–∞—Å'].str.startswith('–î–∞')]
print(f"–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –º–µ—Ä—Ç–≤—ã–º –∑–∞–ø–∞—Å–æ–º: {len(dead_stock)}")
if len(dead_stock) > 0:
    print("\n‚ö†Ô∏è  –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –º–µ—Ä—Ç–≤—ã–º –∑–∞–ø–∞—Å–æ–º (>50% –ø–µ—Ä–∏–æ–¥–æ–≤ –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è):")
    print(dead_stock[['–ú–∞—Ç–µ—Ä–∏–∞–ª', '–§–∏–ª–∏–∞–ª', '–ú–µ—Ä—Ç–≤—ã–π –∑–∞–ø–∞—Å', '–°—Ä–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ']])
else:
    print("‚úÖ –ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –º–µ—Ä—Ç–≤—ã–º –∑–∞–ø–∞—Å–æ–º")

print("\n6. –ë–ò–ó–ù–ï–°-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –û–°–ù–û–í–ï –ù–û–í–´–• –ú–ï–¢–†–ò–ö")
print("=" * 80)

for idx, row in full_results.iterrows():
    material = row['–ú–∞—Ç–µ—Ä–∏–∞–ª']
    branch = row['–§–∏–ª–∏–∞–ª']

    # –ò–∑–≤–ª–µ–∫–∞–µ–º Fill Rate
    fill_rate = float(row['Fill Rate'].replace('%', ''))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ä—Ç–≤–æ–≥–æ –∑–∞–ø–∞—Å–∞
    is_dead = row['–ú–µ—Ä—Ç–≤—ã–π –∑–∞–ø–∞—Å'].startswith('–î–∞')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤
    has_deficits = '–∏–∑' in row['–ü–µ—Ä–∏–æ–¥—ã —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º'] and not row['–ü–µ—Ä–∏–æ–¥—ã —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º'].startswith('0 –∏–∑')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []

    if is_dead:
        recommendations.append(f"üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ú–µ—Ä—Ç–≤—ã–π –∑–∞–ø–∞—Å! –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–∫–≤–∏–¥–∞—Ü–∏—é –∏–ª–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.")

    if fill_rate < 95:
        recommendations.append(f"‚ö†Ô∏è  –í–ê–ñ–ù–û: Fill Rate {fill_rate:.1f}% - –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ (95%). –£–≤–µ–ª–∏—á–∏—Ç—å —Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞.")

    if has_deficits and fill_rate >= 95:
        recommendations.append(f"üìä –ö–û–ù–¢–†–û–õ–¨: –ë—ã–ª–∏ –¥–µ—Ñ–∏—Ü–∏—Ç—ã, –Ω–æ Fill Rate –ø—Ä–∏–µ–º–ª–µ–º—ã–π. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é.")

    if row['ABC-–∫–ª–∞—Å—Å'] == 'A' and fill_rate < 98:
        recommendations.append(f"‚ö†Ô∏è  A-–∫–ª–∞—Å—Å —Ç—Ä–µ–±—É–µ—Ç Fill Rate ‚â•98%. –¢–µ–∫—É—â–∏–π: {fill_rate:.1f}%")

    if recommendations:
        print(f"\n{material} –≤ {branch}:")
        for rec in recommendations:
            print(f"  {rec}")

print("\n" + "=" * 80)
print("‚úÖ –í–°–ï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
print("=" * 80)

print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
print(f"  ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(full_results)}")
print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π Fill Rate: {fill_rates.mean():.1f}%")
print(f"  ‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –¥–µ—Ñ–∏—Ü–∏—Ç–∞–º–∏: {len(deficit_materials)}")
print(f"  ‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –º–µ—Ä—Ç–≤—ã–º –∑–∞–ø–∞—Å–æ–º: {len(dead_stock)}")
print(f"  ‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ A-–∫–ª–∞—Å—Å–∞: {(full_results['ABC-–∫–ª–∞—Å—Å'] == 'A').sum()}")
print(f"  ‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ B-–∫–ª–∞—Å—Å–∞: {(full_results['ABC-–∫–ª–∞—Å—Å'] == 'B').sum()}")
print(f"  ‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ C-–∫–ª–∞—Å—Å–∞: {(full_results['ABC-–∫–ª–∞—Å—Å'] == 'C').sum()}")
