
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
root_dir = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(root_dir))
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import pandas as pd
import numpy as np
import sys
import io
from src.analysis import forecasting_models as fm

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

print("=" * 80)
print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø")
print("=" * 80)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
try:
    df = pd.read_excel('datasets/inventory_dataset_monthly 2021-2023.xlsx')

    # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞/—Ñ–∏–ª–∏–∞–ª–∞
    consumption_col = df.columns[6]  # –°–ø–∏—Å–∞–Ω–æ/–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
    material_col = df.columns[1]
    branch_col = df.columns[3]
    date_col = df.columns[0]

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    test_material = df[material_col].iloc[0]
    test_branch = df[branch_col].iloc[0]

    data = df[(df[material_col] == test_material) & (df[branch_col] == test_branch)].copy()
    data = data.sort_values(date_col)
    series = data[consumption_col].reset_index(drop=True)

    print(f"\n–î–∞–Ω–Ω—ã–µ: {test_material} –≤ {test_branch}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {len(series)}")
    print(f"–ü–µ—Ä–∏–æ–¥: {data[date_col].min().date()} - {data[date_col].max().date()}")
    print(f"\n–ü–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {series.head().tolist()}")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: {series.tail().tolist()}")

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/test
    train_size = len(series) - 6  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    train = series[:train_size]
    test = series[train_size:]

    print(f"\n–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  Train: {len(train)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
    print(f"  Test:  {len(test)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
    print(f"  Test –¥–∞–Ω–Ω—ã–µ (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ): {test.tolist()}")

    # ========================================================================
    # –¢–ï–°–¢ 1: –í—Å–µ –º–æ–¥–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    # ========================================================================

    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 1: –°–†–ê–í–ù–ï–ù–ò–ï –í–°–ï–• –ú–û–î–ï–õ–ï–ô")
    print("=" * 80)

    horizon = len(test)
    results = {}

    # –ú–æ–¥–µ–ª—å 1: Naive
    print("\nüìä –ú–æ–¥–µ–ª—å 1: NAIVE FORECAST")
    pred = fm.naive_forecast(train, horizon=horizon)
    metrics = fm.calculate_metrics(test, pred)
    results['Naive'] = {'forecast': pred, 'metrics': metrics}
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑: {pred}")
    print(f"   MAPE: {metrics['MAPE']:.2f}%")
    print(f"   MAE:  {metrics['MAE']:.2f}")

    # –ú–æ–¥–µ–ª—å 2: Moving Average
    print("\nüìä –ú–æ–¥–µ–ª—å 2: MOVING AVERAGE (–æ–∫–Ω–æ=3)")
    pred = fm.moving_average_forecast(train, window=3, horizon=horizon)
    metrics = fm.calculate_metrics(test, pred)
    results['Moving Average'] = {'forecast': pred, 'metrics': metrics}
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑: {pred}")
    print(f"   MAPE: {metrics['MAPE']:.2f}%")
    print(f"   MAE:  {metrics['MAE']:.2f}")

    # –ú–æ–¥–µ–ª—å 3: Exponential Smoothing
    print("\nüìä –ú–æ–¥–µ–ª—å 3: EXPONENTIAL SMOOTHING")
    pred = fm.exponential_smoothing_forecast(train, alpha=0.3, horizon=horizon)
    metrics = fm.calculate_metrics(test, pred)
    results['Exp Smoothing'] = {'forecast': pred, 'metrics': metrics}
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑: {pred}")
    print(f"   MAPE: {metrics['MAPE']:.2f}%")
    print(f"   MAE:  {metrics['MAE']:.2f}")

    # –ú–æ–¥–µ–ª—å 4: Holt-Winters
    print("\nüìä –ú–æ–¥–µ–ª—å 4: HOLT-WINTERS")
    pred = fm.holt_winters_forecast(train, horizon=horizon, seasonal_periods=12)
    metrics = fm.calculate_metrics(test, pred)
    results['Holt-Winters'] = {'forecast': pred, 'metrics': metrics}
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑: {pred}")
    print(f"   MAPE: {metrics['MAPE']:.2f}%")
    print(f"   MAE:  {metrics['MAE']:.2f}")

    # –ú–æ–¥–µ–ª—å 5: SARIMA
    print("\nüìä –ú–æ–¥–µ–ª—å 5: SARIMA")
    try:
        pred = fm.sarima_forecast(train, horizon=horizon)
        metrics = fm.calculate_metrics(test, pred)
        results['SARIMA'] = {'forecast': pred, 'metrics': metrics}
        print(f"   –ü—Ä–æ–≥–Ω–æ–∑: {pred}")
        print(f"   MAPE: {metrics['MAPE']:.2f}%")
        print(f"   MAE:  {metrics['MAE']:.2f}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  SARIMA –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å: {str(e)}")
        results['SARIMA'] = None

    # ========================================================================
    # –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    # ========================================================================

    print("\n" + "=" * 80)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
    print("=" * 80)

    print(f"\n{'–ú–æ–¥–µ–ª—å':<20} {'MAPE %':<10} {'MAE':<10} {'RMSE':<10}")
    print("-" * 50)

    for model_name, model_result in results.items():
        if model_result is not None:
            m = model_result['metrics']
            print(f"{model_name:<20} {m['MAPE']:<10.2f} {m['MAE']:<10.2f} {m['RMSE']:<10.2f}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
    valid_results = {k: v for k, v in results.items() if v is not None}
    if valid_results:
        best_model = min(valid_results.items(), key=lambda x: x[1]['metrics']['MAPE'])
        print(f"\nüèÜ –õ–£–ß–®–ê–Ø –ú–û–î–ï–õ–¨: {best_model[0]}")
        print(f"   MAPE: {best_model[1]['metrics']['MAPE']:.2f}%")

    # ========================================================================
    # –¢–ï–°–¢ 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    # ========================================================================

    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 2: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–´–ë–û–† –õ–£–ß–®–ï–ô –ú–û–î–ï–õ–ò")
    print("=" * 80)

    best_model_name, all_metrics = fm.auto_select_best_model(train, test_size=3)

    print(f"\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {best_model_name.upper()}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {fm.get_model_description(best_model_name)}")

    print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
    print(fm.format_metrics(all_metrics))

    # ========================================================================
    # –¢–ï–°–¢ 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    # ========================================================================

    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 3: –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø forecast_demand()")
    print("=" * 80)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
    print("\n1. –†–µ–∂–∏–º AUTO (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä):")
    result = fm.forecast_demand(train, horizon=horizon, model='auto')
    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {result['model_used']}")
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑: {result['forecast']}")

    # Holt-Winters
    print("\n2. –†–µ–∂–∏–º HOLT-WINTERS (—Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä):")
    result = fm.forecast_demand(train, horizon=horizon, model='holt_winters')
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑: {result['forecast']}")

    # SARIMA
    print("\n3. –†–µ–∂–∏–º SARIMA (—Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä):")
    try:
        result = fm.forecast_demand(train, horizon=horizon, model='sarima')
        print(f"   –ü—Ä–æ–≥–Ω–æ–∑: {result['forecast']}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {str(e)}")

    # ========================================================================
    # –¢–ï–°–¢ 4: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    # ========================================================================

    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 4: –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø")
    print("=" * 80)

    print("\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –§–∞–∫—Ç vs –ü—Ä–æ–≥–Ω–æ–∑")
    print(f"{'–ü–µ—Ä–∏–æ–¥':<10} {'–§–∞–∫—Ç':<10} {'Naive':<10} {'MA':<10} {'Holt-W':<10}")
    print("-" * 50)

    for i in range(len(test)):
        fact = test.iloc[i]
        naive_val = results['Naive']['forecast'][i]
        ma_val = results['Moving Average']['forecast'][i]
        hw_val = results['Holt-Winters']['forecast'][i]

        print(f"{i+1:<10} {fact:<10.1f} {naive_val:<10.1f} {ma_val:<10.1f} {hw_val:<10.1f}")

    # ========================================================================
    # –í–´–í–û–î–´
    # ========================================================================

    print("\n" + "=" * 80)
    print("–í–´–í–û–î–´")
    print("=" * 80)

    print("""
‚úÖ –í–°–ï –ú–û–î–ï–õ–ò –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:
  1. ‚úÖ Naive - –ø—Ä–æ—Å—Ç–µ–π—à–∏–π baseline
  2. ‚úÖ Moving Average - —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
  3. ‚úÖ Exponential Smoothing - –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
  4. ‚úÖ Holt-Winters - —É—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
  5. ‚úÖ SARIMA - –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å

üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä:
  ‚úÖ –§—É–Ω–∫—Ü–∏—è auto_select_best_model() —É—Å–ø–µ—à–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
  ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Ç—Ä–∏–∫–µ MAPE
  ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π

üìà –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:
  ‚úÖ MAPE - —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è)
  ‚úÖ MAE - —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
  ‚úÖ RMSE - –∫–æ—Ä–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏
  ‚úÖ Bias - —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–º–µ—â–µ–Ω–∏–µ

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
  - –î–ª—è –ú–ï–°–Ø–ß–ù–´–• –¥–∞–Ω–Ω—ã—Ö ‚Üí Holt-Winters –∏–ª–∏ SARIMA
  - –î–ª—è –ù–ï–î–ï–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö ‚Üí Holt-Winters
  - –î–ª—è –ë–´–°–¢–†–û–ì–û –ø—Ä–æ–≥–Ω–æ–∑–∞ ‚Üí Moving Average
  - –ù–µ —É–≤–µ—Ä–µ–Ω—ã? ‚Üí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AUTO —Ä–µ–∂–∏–º!

üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!
    """)

except FileNotFoundError:
    print("\n‚ö†Ô∏è  –§–∞–π–ª datasets/inventory_dataset_monthly 2021-2023.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")

    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é
    np.random.seed(42)
    n = 36  # 3 –≥–æ–¥–∞ –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    trend = np.linspace(100, 150, n)
    seasonal = 20 * np.sin(np.arange(n) * 2 * np.pi / 12)
    noise = np.random.normal(0, 5, n)
    series = pd.Series(trend + seasonal + noise)

    print(f"\n–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (36 –º–µ—Å—è—Ü–µ–≤):")
    print(f"  –ü–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {series.head().tolist()}")
    print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: {series.tail().tolist()}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    train = series[:30]
    test = series[30:]

    print(f"\nüìä –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π:")
    for model_name in ['naive', 'moving_average', 'holt_winters']:
        result = fm.forecast_demand(train, horizon=len(test), model=model_name)
        metrics = fm.calculate_metrics(test, result['forecast'])
        print(f"\n{model_name.upper()}:")
        print(f"  MAPE: {metrics['MAPE']:.2f}%")
        print(f"  MAE:  {metrics['MAE']:.2f}")

print("\n" + "=" * 80)
